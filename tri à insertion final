#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 1000
#include <time.h>


typedef struct donnee
{
    char numero[13];
    char nom[30];
    char prenom[30];
    char entsort[8];
    int booleen;
} don;

FILE* chargerfichier(FILE* fichier)
{
    fichier = NULL;
    fichier = fopen("releve.txt","r");
    if(fichier == NULL)
    {
        printf("erreur d'ouverture de fichier.\n");
    }
    return(fichier);
}

void regroup(FILE* fp,don tab[])
{
    fp = chargerfichier(fp);
    for (int i = 0; i<=MAX; i++)
    {
        fscanf(fp, "%s", tab[i].numero);
        fscanf(fp, "%s", tab[i].prenom);
        fscanf(fp, "%s", tab[i].nom);
        fscanf(fp, "%s", tab[i].entsort);
    }
    fclose(fp);
}

void echange(don tab[MAX], int i)
{
    char* tmp = (char*) malloc(15);
    
    strcpy(tmp, tab[i].numero);
    strcpy(tab[i].numero,tab[i+1].numero);
    strcpy(tab[i+1].numero,tmp);

    strcpy(tmp, tab[i].prenom);
    strcpy(tab[i].prenom,tab[i+1].prenom);
    strcpy(tab[i+1].prenom,tmp);

    strcpy(tmp, tab[i].nom);
    strcpy(tab[i].nom,tab[i+1].nom);
    strcpy(tab[i+1].nom,tmp);

    strcpy(tmp, tab[i].entsort);
    strcpy(tab[i].entsort,tab[i+1].entsort);
    strcpy(tab[i+1].entsort,tmp);
}

int test(char *ch1, char *ch2)
{
    int tmp;
    tmp = strcmp(ch1, ch2);
    return(tmp);
}

void triInsertion(don tab[MAX])
{

    int i, j, h;
    int tmp =0;;
    for(h=0; h<=MAX; h++)
    {
        for (i=1 ; i <= MAX; i++)
        {
            j = i;
            tmp = test(tab[j-1].numero,tab[j].numero);
            while (j > 0 && tmp>0)
            {
                echange(tab, j);
                j--;
            }
        }
    }


}

int main()
{
    FILE* RELEVE;
    RELEVE = NULL;
    don numeros[MAX];

    float temps, t1bis, t2bis;
    clock_t t1, t2;

    RELEVE = chargerfichier(RELEVE);
    regroup(RELEVE, numeros);

    t1 = clock();
    t1bis = (float)t1/CLOCKS_PER_SEC;

    triInsertion(numeros);

    for(int i =0; i<=MAX; i++)
    {
        printf("%s ", numeros[i].numero);
        printf("%s ", numeros[i].prenom);
        printf("%s ", numeros[i].nom);
        printf("%s\n", numeros[i].entsort);
    }

    printf("Temps avant execution (au lancement du programme): %f\n\n\n",t1bis);

    t2 = clock();
    t2bis = (float)t2/CLOCKS_PER_SEC;
    printf("\nTemps apres execution : %f\n\n",t2bis);

    temps = (float)(t2-t1)/CLOCKS_PER_SEC;
    printf("Temps d'execution final = %f - %f = %f\n",t2bis,t1bis,temps);

    return 0;
}
